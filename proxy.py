#!/usr/bin/python

# Copyright (c) Twisted Matrix Laboratories.
# See LICENSE for details.

# Run this example with:
#    python proxy.py
#
# Then configure your web browser to use localhost:8080 as a proxy and
# visit a URL. This proxy is proxying the connection to that URL's
# host.

from random import randint
import sys
import urlparse

from twisted.internet import reactor
from twisted.internet.protocol import ClientFactory
from twisted.protocols.basic import LineReceiver
from twisted.web import proxy, http

from utils import *


### Global Variables ########################################################

SRC = '127.0.0.1'
active_clients = {} # port -> clientFactory
global send_proxy
send_proxy = None

### Send Proxy ##############################################################

class SendProxyConnection(LineReceiver):

    def connectionLost(self, reason):
        print "Connection lost!"
        print reason
        sys.exit(2)

    def lineReceived(self, line):
        parts = line.split()
        if parts[0] == "HELLO":
            print "Connected to the proxy server"
        else:
            port = int(parts[0])
            active_clients[port].received(parts[1:])

class SendProxyConnectionFactory(ClientFactory):

    def clientConnectionFailed(self, connector, reason):
        print "Connection failed!"
        print reason
        sys.exit(1)

    def buildProtocol(self, addr):
        global send_proxy
        send_proxy = SendProxyConnection()
        return send_proxy


class SendProxyClient():

    def __init__(self, src, dst, sport, dport, http_client_factory):
        self.src = src
        self.dst = dst
        self.sport = sport
        self.dport = dport
        self.http_client_factory = http_client_factory

        # Drop packets generated by OS related to our connection
        # (To avoid connection reset)
        command("iptables -A OUTPUT -s %s -d %s -p tcp --sport %d --dport %d -j DROP" % (self.src, self.dst, self.sport, self.dport))

        global send_proxy
        send_proxy.sendLine("CONNECT %s %s %d %d" % (src, dst, sport, dport))


    def received(self, parts):
        if parts[0] == "CLOSE":
            # Undo
            command("iptables -D OUTPUT -s %s -d %s -p tcp --sport %d --dport %d -j DROP" % (self.src, self.dst, self.sport, self.dport))


### HTTP Proxy ##############################################################

class HttpProxyClient(proxy.ProxyClient):
    pass


class HttpProxyClientFactory(proxy.ProxyClientFactory):
    protocol = HttpProxyClient


class HttpProxyRequest(proxy.ProxyRequest):
    protocols = {'http': HttpProxyClientFactory}

    def process(self):
        parsed = urlparse.urlparse(self.uri)
        protocol = parsed[0]

        if not protocol in self.protocols:
            self.setResponseCode(501, "Gateway error")
            self.responseHeaders.addRawHeader("Content-Type", "text/html")
            self.write("<H1>Protocol not supported</H1>")
            self.finish()
            return #XXX

        host = parsed[1]
        port = self.ports[protocol]
        if ':' in host:
            host, port = host.split(':')
            port = int(port)
        rest = urlparse.urlunparse(('', '') + parsed[2:])
        if not rest:
            rest = rest + '/'

        headers = self.getAllHeaders().copy()
        if 'host' not in headers:
            headers['host'] = host

        self.content.seek(0, 0)
        s = self.content.read()

        class_ = self.protocols[protocol]
        clientFactory = class_(self.method, rest, self.clientproto, headers,
                               s, self)

        while True:
            sport = randint(49000, 50000)
            if sport not in active_clients:
                active_clients[sport] = SendProxyClient(SRC, host, sport, port, clientFactory)
                break


class HttpProxy(proxy.Proxy):
    requestFactory = HttpProxyRequest


class ProxyFactory(http.HTTPFactory):
    def buildProtocol(self, addr):
        return HttpProxy()

### Start! ##################################################################

reactor.connectTCP('127.0.0.1', 9090, SendProxyConnectionFactory())
reactor.listenTCP(8080, ProxyFactory())
reactor.run()

